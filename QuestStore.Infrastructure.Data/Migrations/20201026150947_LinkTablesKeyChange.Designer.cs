// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuestStore.Infrastructure.Data;

namespace QuestStore.Infrastructure.Data.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    [Migration("20201026150947_LinkTablesKeyChange")]
    partial class LinkTablesKeyChange
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QuestStore.Core.Entities.Artifact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Artifact");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 799,
                            Description = "New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016",
                            Name = "Ergonomic Fresh Bike"
                        },
                        new
                        {
                            Id = 2,
                            Cost = 3,
                            Description = "New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016",
                            Name = "Sleek Soft Cheese"
                        },
                        new
                        {
                            Id = 3,
                            Cost = 509,
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            Name = "Gorgeous Frozen Cheese",
                            Quantity = 5
                        },
                        new
                        {
                            Id = 4,
                            Cost = 233,
                            Description = "The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients",
                            Name = "Generic Fresh Pants"
                        },
                        new
                        {
                            Id = 5,
                            Cost = 509,
                            Description = "Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles",
                            Name = "Incredible Soft Keyboard",
                            Quantity = 1
                        },
                        new
                        {
                            Id = 6,
                            Cost = 48,
                            Description = "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality",
                            Name = "Small Concrete Pants",
                            Quantity = 10
                        },
                        new
                        {
                            Id = 7,
                            Cost = 133,
                            Description = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit",
                            Name = "Rustic Steel Tuna",
                            Quantity = 7
                        },
                        new
                        {
                            Id = 8,
                            Cost = 631,
                            Description = "Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles",
                            Name = "Awesome Plastic Shoes"
                        },
                        new
                        {
                            Id = 9,
                            Cost = 729,
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            Name = "Ergonomic Fresh Pants"
                        },
                        new
                        {
                            Id = 10,
                            Cost = 931,
                            Description = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J",
                            Name = "Tasty Rubber Shoes"
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classroom");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.MentorClassroom", b =>
                {
                    b.Property<int>("MentorId")
                        .HasColumnType("int");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.HasKey("MentorId", "ClassroomId");

                    b.HasIndex("ClassroomId");

                    b.ToTable("MentorClassroom");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reward")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Quest");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals",
                            Name = "Practical Wooden Sausages",
                            Reward = 247,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 2,
                            Description = "New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016",
                            Name = "Awesome Cotton Chicken",
                            Reward = 440,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 3,
                            Description = "The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive",
                            Name = "Fantastic Rubber Keyboard",
                            Reward = 632,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 4,
                            Description = "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality",
                            Name = "Handmade Concrete Shirt",
                            Reward = 898,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit",
                            Name = "Refined Soft Hat",
                            Reward = 208,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 6,
                            Description = "The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients",
                            Name = "Practical Concrete Chair",
                            Reward = 871,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit",
                            Name = "Unbranded Rubber Towels",
                            Reward = 935,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 8,
                            Description = "The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design",
                            Name = "Awesome Wooden Bike",
                            Reward = 191,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 9,
                            Description = "New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016",
                            Name = "Refined Fresh Tuna",
                            Reward = 789,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 10,
                            Description = "New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016",
                            Name = "Awesome Wooden Bike",
                            Reward = 119,
                            Type = "Basic"
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentArtifact", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ArtifactId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ArtifactId");

                    b.HasIndex("ArtifactId");

                    b.ToTable("StudentArtifact");

                    b.HasData(
                        new
                        {
                            StudentId = 4,
                            ArtifactId = 5
                        },
                        new
                        {
                            StudentId = 1,
                            ArtifactId = 1
                        },
                        new
                        {
                            StudentId = 10,
                            ArtifactId = 9
                        },
                        new
                        {
                            StudentId = 4,
                            ArtifactId = 2
                        },
                        new
                        {
                            StudentId = 2,
                            ArtifactId = 2
                        },
                        new
                        {
                            StudentId = 3,
                            ArtifactId = 7
                        },
                        new
                        {
                            StudentId = 10,
                            ArtifactId = 1
                        },
                        new
                        {
                            StudentId = 6,
                            ArtifactId = 9
                        },
                        new
                        {
                            StudentId = 9,
                            ArtifactId = 4
                        },
                        new
                        {
                            StudentId = 1,
                            ArtifactId = 10
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentClassroom", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ClassroomId");

                    b.HasIndex("ClassroomId");

                    b.ToTable("StudentClassroom");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Role").HasValue("Admin");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.Mentor", b =>
                {
                    b.HasBaseType("QuestStore.Core.Entities.User");

                    b.HasDiscriminator().HasValue("Mentor");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.Student", b =>
                {
                    b.HasBaseType("QuestStore.Core.Entities.User");

                    b.Property<int>("Coins")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Student");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Try to quantify the SQL circuit, maybe it will quantify the online circuit!",
                            Email = "Lucy_Kerluke@hotmail.com",
                            Name = "Lucy",
                            Surname = "Kerluke",
                            Coins = 170
                        },
                        new
                        {
                            Id = 2,
                            Description = "You can't index the alarm without hacking the cross-platform SMTP alarm!",
                            Email = "Christy.Pacocha83@gmail.com",
                            Name = "Christy",
                            Surname = "Pacocha",
                            Coins = 408
                        },
                        new
                        {
                            Id = 3,
                            Description = "You can't back up the bus without hacking the redundant EXE bus!",
                            Email = "Dexter31@hotmail.com",
                            Name = "Dexter",
                            Surname = "Swift",
                            Coins = 801
                        },
                        new
                        {
                            Id = 4,
                            Description = "Try to index the THX driver, maybe it will index the neural driver!",
                            Email = "Delores.Auer@yahoo.com",
                            Name = "Delores",
                            Surname = "Auer",
                            Coins = 776
                        },
                        new
                        {
                            Id = 5,
                            Description = "You can't input the interface without calculating the 1080p XML interface!",
                            Email = "June94@hotmail.com",
                            Name = "June",
                            Surname = "Buckridge",
                            Coins = 981
                        },
                        new
                        {
                            Id = 6,
                            Description = "parsing the driver won't do anything, we need to input the auxiliary SQL driver!",
                            Email = "Bonnie.Hirthe12@gmail.com",
                            Name = "Bonnie",
                            Surname = "Hirthe",
                            Coins = 830
                        },
                        new
                        {
                            Id = 7,
                            Description = "Use the wireless CSS sensor, then you can parse the wireless sensor!",
                            Email = "Janis.Gleason59@yahoo.com",
                            Name = "Janis",
                            Surname = "Gleason",
                            Coins = 189
                        },
                        new
                        {
                            Id = 8,
                            Description = "We need to generate the virtual PCI circuit!",
                            Email = "Corey.Terry37@gmail.com",
                            Name = "Corey",
                            Surname = "Terry",
                            Coins = 242
                        },
                        new
                        {
                            Id = 9,
                            Description = "We need to hack the 1080p SQL pixel!",
                            Email = "Caroline.Rutherford51@gmail.com",
                            Name = "Caroline",
                            Surname = "Rutherford",
                            Coins = 712
                        },
                        new
                        {
                            Id = 10,
                            Description = "Use the haptic ADP circuit, then you can reboot the haptic circuit!",
                            Email = "Gerardo.Robel29@yahoo.com",
                            Name = "Gerardo",
                            Surname = "Robel",
                            Coins = 447
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.MentorClassroom", b =>
                {
                    b.HasOne("QuestStore.Core.Entities.Classroom", "Classroom")
                        .WithMany("MentorClassrooms")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestStore.Core.Entities.Mentor", "Mentor")
                        .WithMany("MentorClassrooms")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentArtifact", b =>
                {
                    b.HasOne("QuestStore.Core.Entities.Artifact", "Artifact")
                        .WithMany("StudentArtifacts")
                        .HasForeignKey("ArtifactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestStore.Core.Entities.Student", "Student")
                        .WithMany("StudentArtifacts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentClassroom", b =>
                {
                    b.HasOne("QuestStore.Core.Entities.Classroom", "Classroom")
                        .WithMany("StudentClassrooms")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestStore.Core.Entities.Student", "Student")
                        .WithMany("StudentClassrooms")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
