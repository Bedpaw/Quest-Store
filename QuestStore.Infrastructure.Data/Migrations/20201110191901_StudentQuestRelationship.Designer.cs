// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuestStore.Infrastructure.Data;

namespace QuestStore.Infrastructure.Data.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    [Migration("20201110191901_StudentQuestRelationship")]
    partial class StudentQuestRelationship
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QuestStore.Core.Entities.Artifact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Artifact");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 868,
                            Description = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support",
                            Name = "Intelligent Metal Car",
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            Cost = 343,
                            Description = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit",
                            Name = "Gorgeous Concrete Fish",
                            Quantity = 5
                        },
                        new
                        {
                            Id = 3,
                            Cost = 685,
                            Description = "The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive",
                            Name = "Handcrafted Soft Car"
                        },
                        new
                        {
                            Id = 4,
                            Cost = 49,
                            Description = "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality",
                            Name = "Intelligent Concrete Salad"
                        },
                        new
                        {
                            Id = 5,
                            Cost = 238,
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            Name = "Handmade Soft Pizza"
                        },
                        new
                        {
                            Id = 6,
                            Cost = 243,
                            Description = "Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles",
                            Name = "Sleek Steel Chicken",
                            Quantity = 9
                        },
                        new
                        {
                            Id = 7,
                            Cost = 354,
                            Description = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals",
                            Name = "Generic Metal Shirt",
                            Quantity = 8
                        },
                        new
                        {
                            Id = 8,
                            Cost = 635,
                            Description = "The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive",
                            Name = "Rustic Fresh Cheese",
                            Quantity = 0
                        },
                        new
                        {
                            Id = 9,
                            Cost = 806,
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            Name = "Practical Wooden Bacon",
                            Quantity = 7
                        },
                        new
                        {
                            Id = 10,
                            Cost = 858,
                            Description = "The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive",
                            Name = "Fantastic Fresh Car"
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classroom");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.MentorClassroom", b =>
                {
                    b.Property<int>("MentorId")
                        .HasColumnType("int");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.HasKey("MentorId", "ClassroomId");

                    b.HasIndex("ClassroomId");

                    b.ToTable("MentorClassroom");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reward")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Quest");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016",
                            Name = "Handcrafted Rubber Pizza",
                            Reward = 982,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 2,
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            Name = "Fantastic Frozen Tuna",
                            Reward = 993,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 3,
                            Description = "The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients",
                            Name = "Tasty Fresh Table",
                            Reward = 206,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 4,
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            Name = "Intelligent Fresh Pizza",
                            Reward = 670,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit",
                            Name = "Generic Rubber Car",
                            Reward = 931,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles",
                            Name = "Unbranded Fresh Table",
                            Reward = 674,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 7,
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            Name = "Incredible Fresh Chair",
                            Reward = 184,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit",
                            Name = "Handmade Rubber Shirt",
                            Reward = 270,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 9,
                            Description = "The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients",
                            Name = "Fantastic Steel Gloves",
                            Reward = 530,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 10,
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            Name = "Unbranded Fresh Salad",
                            Reward = 626,
                            Type = "Basic"
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentArtifact", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ArtifactId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ArtifactId");

                    b.HasIndex("ArtifactId");

                    b.ToTable("StudentArtifact");

                    b.HasData(
                        new
                        {
                            StudentId = 10,
                            ArtifactId = 1
                        },
                        new
                        {
                            StudentId = 5,
                            ArtifactId = 9
                        },
                        new
                        {
                            StudentId = 2,
                            ArtifactId = 8
                        },
                        new
                        {
                            StudentId = 6,
                            ArtifactId = 3
                        },
                        new
                        {
                            StudentId = 8,
                            ArtifactId = 5
                        },
                        new
                        {
                            StudentId = 1,
                            ArtifactId = 6
                        },
                        new
                        {
                            StudentId = 5,
                            ArtifactId = 3
                        },
                        new
                        {
                            StudentId = 10,
                            ArtifactId = 4
                        },
                        new
                        {
                            StudentId = 3,
                            ArtifactId = 3
                        },
                        new
                        {
                            StudentId = 4,
                            ArtifactId = 7
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentClassroom", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ClassroomId");

                    b.HasIndex("ClassroomId");

                    b.ToTable("StudentClassroom");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentQuest", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "QuestId");

                    b.HasIndex("QuestId");

                    b.ToTable("StudentQuest");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Role").HasValue("Admin");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.Mentor", b =>
                {
                    b.HasBaseType("QuestStore.Core.Entities.User");

                    b.HasDiscriminator().HasValue("Mentor");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.Student", b =>
                {
                    b.HasBaseType("QuestStore.Core.Entities.User");

                    b.Property<int>("Coins")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Student");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Use the neural TCP array, then you can program the neural array!",
                            Email = "Kristen_Kiehn@gmail.com",
                            Name = "Kristen",
                            Surname = "Kiehn",
                            Coins = 178
                        },
                        new
                        {
                            Id = 2,
                            Description = "parsing the hard drive won't do anything, we need to input the neural AGP hard drive!",
                            Email = "Antonio.Collier83@hotmail.com",
                            Name = "Antonio",
                            Surname = "Collier",
                            Coins = 873
                        },
                        new
                        {
                            Id = 3,
                            Description = "We need to back up the wireless IB firewall!",
                            Email = "Lynne_Vandervort80@gmail.com",
                            Name = "Lynne",
                            Surname = "Vandervort",
                            Coins = 419
                        },
                        new
                        {
                            Id = 4,
                            Description = "The SDD card is down, reboot the multi-byte card so we can reboot the SDD card!",
                            Email = "Mabel_Olson12@yahoo.com",
                            Name = "Mabel",
                            Surname = "Olson",
                            Coins = 943
                        },
                        new
                        {
                            Id = 5,
                            Description = "If we calculate the port, we can get to the SMTP port through the online SMTP port!",
                            Email = "Hugo_Yost74@gmail.com",
                            Name = "Hugo",
                            Surname = "Yost",
                            Coins = 648
                        },
                        new
                        {
                            Id = 6,
                            Description = "Use the haptic HTTP alarm, then you can copy the haptic alarm!",
                            Email = "Jay.Runolfsdottir@hotmail.com",
                            Name = "Jay",
                            Surname = "Runolfsdottir",
                            Coins = 198
                        },
                        new
                        {
                            Id = 7,
                            Description = "We need to parse the redundant EXE application!",
                            Email = "Antonia.Legros@gmail.com",
                            Name = "Antonia",
                            Surname = "Legros",
                            Coins = 609
                        },
                        new
                        {
                            Id = 8,
                            Description = "Use the wireless THX alarm, then you can bypass the wireless alarm!",
                            Email = "Ronnie54@yahoo.com",
                            Name = "Ronnie",
                            Surname = "Ratke",
                            Coins = 801
                        },
                        new
                        {
                            Id = 9,
                            Description = "We need to bypass the primary SCSI bus!",
                            Email = "Betty4@hotmail.com",
                            Name = "Betty",
                            Surname = "Smith",
                            Coins = 774
                        },
                        new
                        {
                            Id = 10,
                            Description = "If we bypass the port, we can get to the IB port through the primary IB port!",
                            Email = "Mary.Hodkiewicz38@gmail.com",
                            Name = "Mary",
                            Surname = "Hodkiewicz",
                            Coins = 288
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.MentorClassroom", b =>
                {
                    b.HasOne("QuestStore.Core.Entities.Classroom", "Classroom")
                        .WithMany("MentorClassrooms")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestStore.Core.Entities.Mentor", "Mentor")
                        .WithMany("MentorClassrooms")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentArtifact", b =>
                {
                    b.HasOne("QuestStore.Core.Entities.Artifact", "Artifact")
                        .WithMany()
                        .HasForeignKey("ArtifactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestStore.Core.Entities.Student", "Student")
                        .WithMany("StudentArtifacts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentClassroom", b =>
                {
                    b.HasOne("QuestStore.Core.Entities.Classroom", "Classroom")
                        .WithMany("StudentClassrooms")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestStore.Core.Entities.Student", "Student")
                        .WithMany("StudentClassrooms")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentQuest", b =>
                {
                    b.HasOne("QuestStore.Core.Entities.Quest", "Quest")
                        .WithMany()
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestStore.Core.Entities.Student", "Student")
                        .WithMany("StudentQuests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
