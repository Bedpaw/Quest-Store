// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuestStore.Infrastructure.Data;

namespace QuestStore.Infrastructure.Data.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    [Migration("20201113223814_StudentArtifactRecreation")]
    partial class StudentArtifactRecreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QuestStore.Core.Entities.Artifact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Artifact");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 895,
                            Description = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J",
                            Name = "Awesome Frozen Table",
                            Quantity = 8
                        },
                        new
                        {
                            Id = 2,
                            Cost = 912,
                            Description = "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality",
                            Name = "Generic Soft Shirt",
                            Quantity = 7
                        },
                        new
                        {
                            Id = 3,
                            Cost = 998,
                            Description = "The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive",
                            Name = "Fantastic Fresh Mouse"
                        },
                        new
                        {
                            Id = 4,
                            Cost = 454,
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            Name = "Unbranded Plastic Chips",
                            Quantity = 7
                        },
                        new
                        {
                            Id = 5,
                            Cost = 124,
                            Description = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit",
                            Name = "Generic Fresh Pants"
                        },
                        new
                        {
                            Id = 6,
                            Cost = 907,
                            Description = "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality",
                            Name = "Handmade Fresh Cheese"
                        },
                        new
                        {
                            Id = 7,
                            Cost = 289,
                            Description = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals",
                            Name = "Awesome Frozen Cheese"
                        },
                        new
                        {
                            Id = 8,
                            Cost = 343,
                            Description = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit",
                            Name = "Refined Soft Bacon",
                            Quantity = 0
                        },
                        new
                        {
                            Id = 9,
                            Cost = 59,
                            Description = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J",
                            Name = "Awesome Granite Chicken",
                            Quantity = 10
                        },
                        new
                        {
                            Id = 10,
                            Cost = 819,
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            Name = "Unbranded Steel Tuna",
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classroom");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.MentorClassroom", b =>
                {
                    b.Property<int>("MentorId")
                        .HasColumnType("int");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.HasKey("MentorId", "ClassroomId");

                    b.HasIndex("ClassroomId");

                    b.ToTable("MentorClassroom");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reward")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Quest");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J",
                            Name = "Incredible Plastic Ball",
                            Reward = 21,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 2,
                            Description = "The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design",
                            Name = "Generic Cotton Computer",
                            Reward = 133,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 3,
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            Name = "Tasty Rubber Chicken",
                            Reward = 988,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 4,
                            Description = "The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design",
                            Name = "Incredible Steel Computer",
                            Reward = 337,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit",
                            Name = "Sleek Fresh Bike",
                            Reward = 10,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 6,
                            Description = "The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design",
                            Name = "Practical Cotton Table",
                            Reward = 805,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 7,
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            Name = "Gorgeous Steel Car",
                            Reward = 680,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 8,
                            Description = "The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients",
                            Name = "Intelligent Concrete Tuna",
                            Reward = 716,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals",
                            Name = "Incredible Steel Salad",
                            Reward = 737,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit",
                            Name = "Handcrafted Fresh Sausages",
                            Reward = 952,
                            Type = "Basic"
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentArtifact", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ArtifactId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ArtifactId");

                    b.HasIndex("ArtifactId");

                    b.ToTable("StudentArtifact");

                    b.HasData(
                        new
                        {
                            StudentId = 2,
                            ArtifactId = 1
                        },
                        new
                        {
                            StudentId = 2,
                            ArtifactId = 7
                        },
                        new
                        {
                            StudentId = 10,
                            ArtifactId = 9
                        },
                        new
                        {
                            StudentId = 3,
                            ArtifactId = 9
                        },
                        new
                        {
                            StudentId = 2,
                            ArtifactId = 6
                        },
                        new
                        {
                            StudentId = 5,
                            ArtifactId = 6
                        },
                        new
                        {
                            StudentId = 2,
                            ArtifactId = 9
                        },
                        new
                        {
                            StudentId = 5,
                            ArtifactId = 4
                        },
                        new
                        {
                            StudentId = 1,
                            ArtifactId = 3
                        },
                        new
                        {
                            StudentId = 10,
                            ArtifactId = 1
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentClassroom", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ClassroomId");

                    b.HasIndex("ClassroomId");

                    b.ToTable("StudentClassroom");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentQuest", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "QuestId");

                    b.HasIndex("QuestId");

                    b.ToTable("StudentQuest");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Role").HasValue("Admin");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.Mentor", b =>
                {
                    b.HasBaseType("QuestStore.Core.Entities.User");

                    b.HasDiscriminator().HasValue("Mentor");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.Student", b =>
                {
                    b.HasBaseType("QuestStore.Core.Entities.User");

                    b.Property<int>("Coins")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Student");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "If we reboot the port, we can get to the COM port through the wireless COM port!",
                            Email = "Reginald.Sipes@gmail.com",
                            Name = "Reginald",
                            Surname = "Sipes",
                            Coins = 844
                        },
                        new
                        {
                            Id = 2,
                            Description = "I'll compress the optical PCI driver, that should driver the PCI driver!",
                            Email = "Tamara59@gmail.com",
                            Name = "Tamara",
                            Surname = "Blanda",
                            Coins = 959
                        },
                        new
                        {
                            Id = 3,
                            Description = "Use the redundant SCSI pixel, then you can index the redundant pixel!",
                            Email = "Sarah65@gmail.com",
                            Name = "Sarah",
                            Surname = "Hintz",
                            Coins = 965
                        },
                        new
                        {
                            Id = 4,
                            Description = "I'll parse the digital CSS bus, that should bus the CSS bus!",
                            Email = "Violet.Gutkowski@gmail.com",
                            Name = "Violet",
                            Surname = "Gutkowski",
                            Coins = 819
                        },
                        new
                        {
                            Id = 5,
                            Description = "You can't compress the capacitor without transmitting the back-end SCSI capacitor!",
                            Email = "Lana42@yahoo.com",
                            Name = "Lana",
                            Surname = "Quigley",
                            Coins = 406
                        },
                        new
                        {
                            Id = 6,
                            Description = "I'll quantify the multi-byte CSS microchip, that should microchip the CSS microchip!",
                            Email = "Pablo16@yahoo.com",
                            Name = "Pablo",
                            Surname = "Wilderman",
                            Coins = 154
                        },
                        new
                        {
                            Id = 7,
                            Description = "If we quantify the matrix, we can get to the JBOD matrix through the neural JBOD matrix!",
                            Email = "Rose.Berge95@hotmail.com",
                            Name = "Rose",
                            Surname = "Berge",
                            Coins = 436
                        },
                        new
                        {
                            Id = 8,
                            Description = "You can't generate the application without programming the digital SMS application!",
                            Email = "Lloyd73@yahoo.com",
                            Name = "Lloyd",
                            Surname = "Rolfson",
                            Coins = 267
                        },
                        new
                        {
                            Id = 9,
                            Description = "We need to hack the back-end SSL protocol!",
                            Email = "Otis_Dooley15@yahoo.com",
                            Name = "Otis",
                            Surname = "Dooley",
                            Coins = 544
                        },
                        new
                        {
                            Id = 10,
                            Description = "I'll generate the online ADP capacitor, that should capacitor the ADP capacitor!",
                            Email = "Antonia.Mitchell@gmail.com",
                            Name = "Antonia",
                            Surname = "Mitchell",
                            Coins = 200
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.MentorClassroom", b =>
                {
                    b.HasOne("QuestStore.Core.Entities.Classroom", "Classroom")
                        .WithMany("MentorClassrooms")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestStore.Core.Entities.Mentor", "Mentor")
                        .WithMany("MentorClassrooms")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentArtifact", b =>
                {
                    b.HasOne("QuestStore.Core.Entities.Artifact", "Artifact")
                        .WithMany()
                        .HasForeignKey("ArtifactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestStore.Core.Entities.Student", "Student")
                        .WithMany("StudentArtifacts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentClassroom", b =>
                {
                    b.HasOne("QuestStore.Core.Entities.Classroom", "Classroom")
                        .WithMany("StudentClassrooms")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestStore.Core.Entities.Student", "Student")
                        .WithMany("StudentClassrooms")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentQuest", b =>
                {
                    b.HasOne("QuestStore.Core.Entities.Quest", "Quest")
                        .WithMany()
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestStore.Core.Entities.Student", "Student")
                        .WithMany("StudentQuests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
