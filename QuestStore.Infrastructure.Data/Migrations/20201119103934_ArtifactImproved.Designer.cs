// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuestStore.Infrastructure.Data;

namespace QuestStore.Infrastructure.Data.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    [Migration("20201119103934_ArtifactImproved")]
    partial class ArtifactImproved
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QuestStore.Core.Entities.Artifact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Artifact");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 792,
                            Description = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit",
                            Name = "Sleek Fresh Cheese",
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 2,
                            Cost = 952,
                            Description = "Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles",
                            Name = "Handmade Soft Table",
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 3,
                            Cost = 603,
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            Name = "Awesome Steel Towels",
                            Quantity = 8,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 4,
                            Cost = 364,
                            Description = "Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles",
                            Name = "Fantastic Fresh Bacon",
                            Quantity = 6,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 5,
                            Cost = 221,
                            Description = "The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design",
                            Name = "Intelligent Rubber Bacon",
                            Quantity = 3,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 6,
                            Cost = 231,
                            Description = "The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive",
                            Name = "Sleek Metal Towels",
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 7,
                            Cost = 986,
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            Name = "Handcrafted Cotton Keyboard",
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 8,
                            Cost = 619,
                            Description = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals",
                            Name = "Intelligent Granite Ball",
                            Quantity = 4,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 9,
                            Cost = 180,
                            Description = "The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design",
                            Name = "Refined Fresh Hat",
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 10,
                            Cost = 178,
                            Description = "The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients",
                            Name = "Fantastic Cotton Car",
                            Type = "Extra"
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classroom");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.MentorClassroom", b =>
                {
                    b.Property<int>("MentorId")
                        .HasColumnType("int");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.HasKey("MentorId", "ClassroomId");

                    b.HasIndex("ClassroomId");

                    b.ToTable("MentorClassroom");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reward")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Quest");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support",
                            Name = "Rustic Wooden Fish",
                            Reward = 181,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 2,
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            Name = "Sleek Metal Bike",
                            Reward = 112,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 3,
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            Name = "Refined Frozen Pants",
                            Reward = 966,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 4,
                            Description = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J",
                            Name = "Gorgeous Rubber Mouse",
                            Reward = 524,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit",
                            Name = "Ergonomic Wooden Car",
                            Reward = 964,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals",
                            Name = "Small Metal Tuna",
                            Reward = 236,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 7,
                            Description = "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality",
                            Name = "Ergonomic Concrete Towels",
                            Reward = 259,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 8,
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            Name = "Tasty Granite Towels",
                            Reward = 566,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 9,
                            Description = "New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016",
                            Name = "Unbranded Metal Bike",
                            Reward = 880,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 10,
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            Name = "Generic Metal Soap",
                            Reward = 996,
                            Type = "Basic"
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentArtifact", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ArtifactId")
                        .HasColumnType("int");

                    b.Property<int>("PurchasedQuantity")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ArtifactId");

                    b.HasIndex("ArtifactId");

                    b.ToTable("StudentArtifact");

                    b.HasData(
                        new
                        {
                            StudentId = 4,
                            ArtifactId = 3,
                            PurchasedQuantity = 6
                        },
                        new
                        {
                            StudentId = 2,
                            ArtifactId = 4,
                            PurchasedQuantity = 1
                        },
                        new
                        {
                            StudentId = 1,
                            ArtifactId = 10,
                            PurchasedQuantity = 4
                        },
                        new
                        {
                            StudentId = 10,
                            ArtifactId = 1,
                            PurchasedQuantity = 8
                        },
                        new
                        {
                            StudentId = 4,
                            ArtifactId = 6,
                            PurchasedQuantity = 6
                        },
                        new
                        {
                            StudentId = 10,
                            ArtifactId = 10,
                            PurchasedQuantity = 8
                        },
                        new
                        {
                            StudentId = 7,
                            ArtifactId = 4,
                            PurchasedQuantity = 10
                        },
                        new
                        {
                            StudentId = 2,
                            ArtifactId = 2,
                            PurchasedQuantity = 5
                        },
                        new
                        {
                            StudentId = 7,
                            ArtifactId = 8,
                            PurchasedQuantity = 1
                        },
                        new
                        {
                            StudentId = 10,
                            ArtifactId = 5,
                            PurchasedQuantity = 3
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentClassroom", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ClassroomId");

                    b.HasIndex("ClassroomId");

                    b.ToTable("StudentClassroom");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentQuest", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "QuestId");

                    b.HasIndex("QuestId");

                    b.ToTable("StudentQuest");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Role").HasValue("Admin");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.Mentor", b =>
                {
                    b.HasBaseType("QuestStore.Core.Entities.User");

                    b.HasDiscriminator().HasValue("Mentor");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.Student", b =>
                {
                    b.HasBaseType("QuestStore.Core.Entities.User");

                    b.Property<int>("Coins")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Student");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The RSS monitor is down, copy the online monitor so we can copy the RSS monitor!",
                            Email = "Tricia.Bailey4@yahoo.com",
                            Name = "Tricia",
                            Surname = "Bailey",
                            Coins = 825
                        },
                        new
                        {
                            Id = 2,
                            Description = "I'll quantify the open-source COM program, that should program the COM program!",
                            Email = "Monique_Morar@yahoo.com",
                            Name = "Monique",
                            Surname = "Morar",
                            Coins = 219
                        },
                        new
                        {
                            Id = 3,
                            Description = "Use the primary SCSI alarm, then you can quantify the primary alarm!",
                            Email = "Claire.White@hotmail.com",
                            Name = "Claire",
                            Surname = "White",
                            Coins = 392
                        },
                        new
                        {
                            Id = 4,
                            Description = "You can't copy the array without navigating the neural USB array!",
                            Email = "William_Becker@hotmail.com",
                            Name = "William",
                            Surname = "Becker",
                            Coins = 633
                        },
                        new
                        {
                            Id = 5,
                            Description = "Try to index the EXE bus, maybe it will index the online bus!",
                            Email = "Johnathan_Hyatt13@yahoo.com",
                            Name = "Johnathan",
                            Surname = "Hyatt",
                            Coins = 609
                        },
                        new
                        {
                            Id = 6,
                            Description = "Use the 1080p XSS microchip, then you can navigate the 1080p microchip!",
                            Email = "Alfredo_Legros@hotmail.com",
                            Name = "Alfredo",
                            Surname = "Legros",
                            Coins = 722
                        },
                        new
                        {
                            Id = 7,
                            Description = "bypassing the firewall won't do anything, we need to generate the back-end RSS firewall!",
                            Email = "Darlene93@hotmail.com",
                            Name = "Darlene",
                            Surname = "Becker",
                            Coins = 582
                        },
                        new
                        {
                            Id = 8,
                            Description = "transmitting the monitor won't do anything, we need to compress the wireless JSON monitor!",
                            Email = "Edna.Heidenreich46@yahoo.com",
                            Name = "Edna",
                            Surname = "Heidenreich",
                            Coins = 51
                        },
                        new
                        {
                            Id = 9,
                            Description = "I'll bypass the 1080p SAS firewall, that should firewall the SAS firewall!",
                            Email = "Julie_Metz65@gmail.com",
                            Name = "Julie",
                            Surname = "Metz",
                            Coins = 14
                        },
                        new
                        {
                            Id = 10,
                            Description = "We need to reboot the neural PNG interface!",
                            Email = "Susan_Lemke5@gmail.com",
                            Name = "Susan",
                            Surname = "Lemke",
                            Coins = 277
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.MentorClassroom", b =>
                {
                    b.HasOne("QuestStore.Core.Entities.Classroom", "Classroom")
                        .WithMany("MentorClassrooms")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestStore.Core.Entities.Mentor", "Mentor")
                        .WithMany("MentorClassrooms")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentArtifact", b =>
                {
                    b.HasOne("QuestStore.Core.Entities.Artifact", "Artifact")
                        .WithMany()
                        .HasForeignKey("ArtifactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestStore.Core.Entities.Student", "Student")
                        .WithMany("StudentArtifacts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentClassroom", b =>
                {
                    b.HasOne("QuestStore.Core.Entities.Classroom", "Classroom")
                        .WithMany("StudentClassrooms")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestStore.Core.Entities.Student", "Student")
                        .WithMany("StudentClassrooms")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentQuest", b =>
                {
                    b.HasOne("QuestStore.Core.Entities.Quest", "Quest")
                        .WithMany()
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestStore.Core.Entities.Student", "Student")
                        .WithMany("StudentQuests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
