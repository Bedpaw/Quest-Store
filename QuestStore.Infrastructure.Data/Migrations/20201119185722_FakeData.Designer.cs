// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuestStore.Infrastructure.Data;

namespace QuestStore.Infrastructure.Data.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    [Migration("20201119185722_FakeData")]
    partial class FakeData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QuestStore.Core.Entities.Artifact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Artifact");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 818,
                            Description = "New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016",
                            Name = "Fantastic Steel Chair",
                            Quantity = 2,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 2,
                            Cost = 167,
                            Description = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J",
                            Name = "Generic Soft Towels",
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 3,
                            Cost = 344,
                            Description = "New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016",
                            Name = "Tasty Soft Towels",
                            Quantity = 7,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 4,
                            Cost = 1,
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            Name = "Ergonomic Soft Ball",
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 5,
                            Cost = 334,
                            Description = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support",
                            Name = "Licensed Frozen Fish",
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 6,
                            Cost = 795,
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            Name = "Licensed Frozen Pants",
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 7,
                            Cost = 534,
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            Name = "Rustic Frozen Ball",
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 8,
                            Cost = 965,
                            Description = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support",
                            Name = "Ergonomic Soft Computer",
                            Quantity = 10,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 9,
                            Cost = 817,
                            Description = "New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016",
                            Name = "Generic Cotton Tuna",
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 10,
                            Cost = 381,
                            Description = "The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design",
                            Name = "Generic Fresh Shirt",
                            Quantity = 4,
                            Type = "Basic"
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classroom");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Virtual even-keeled ability",
                            Name = "Daniel - Kuvalis"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Exclusive systemic circuit",
                            Name = "Collins and Sons"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Triple-buffered dedicated hardware",
                            Name = "Kuvalis and Sons"
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.MentorClassroom", b =>
                {
                    b.Property<int>("MentorId")
                        .HasColumnType("int");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.HasKey("MentorId", "ClassroomId");

                    b.HasIndex("ClassroomId");

                    b.ToTable("MentorClassroom");

                    b.HasData(
                        new
                        {
                            MentorId = 11,
                            ClassroomId = 1
                        },
                        new
                        {
                            MentorId = 15,
                            ClassroomId = 1
                        },
                        new
                        {
                            MentorId = 13,
                            ClassroomId = 2
                        },
                        new
                        {
                            MentorId = 12,
                            ClassroomId = 2
                        },
                        new
                        {
                            MentorId = 11,
                            ClassroomId = 3
                        },
                        new
                        {
                            MentorId = 15,
                            ClassroomId = 2
                        },
                        new
                        {
                            MentorId = 14,
                            ClassroomId = 3
                        },
                        new
                        {
                            MentorId = 12,
                            ClassroomId = 1
                        },
                        new
                        {
                            MentorId = 14,
                            ClassroomId = 1
                        },
                        new
                        {
                            MentorId = 14,
                            ClassroomId = 2
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reward")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Quest");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals",
                            Name = "Handmade Frozen Towels",
                            Reward = 508,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals",
                            Name = "Intelligent Metal Towels",
                            Reward = 271,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 3,
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            Name = "Tasty Metal Bike",
                            Reward = 687,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 4,
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            Name = "Generic Plastic Bacon",
                            Reward = 679,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 5,
                            Description = "New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016",
                            Name = "Awesome Fresh Tuna",
                            Reward = 637,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 6,
                            Description = "The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design",
                            Name = "Rustic Steel Chips",
                            Reward = 98,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 7,
                            Description = "The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive",
                            Name = "Intelligent Concrete Towels",
                            Reward = 51,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 8,
                            Description = "The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design",
                            Name = "Sleek Frozen Sausages",
                            Reward = 542,
                            Type = "Extra"
                        },
                        new
                        {
                            Id = 9,
                            Description = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J",
                            Name = "Gorgeous Plastic Gloves",
                            Reward = 749,
                            Type = "Basic"
                        },
                        new
                        {
                            Id = 10,
                            Description = "The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive",
                            Name = "Fantastic Concrete Gloves",
                            Reward = 387,
                            Type = "Extra"
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentArtifact", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ArtifactId")
                        .HasColumnType("int");

                    b.Property<int>("PurchasedQuantity")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ArtifactId");

                    b.HasIndex("ArtifactId");

                    b.ToTable("StudentArtifact");

                    b.HasData(
                        new
                        {
                            StudentId = 2,
                            ArtifactId = 8,
                            PurchasedQuantity = 1
                        },
                        new
                        {
                            StudentId = 3,
                            ArtifactId = 9,
                            PurchasedQuantity = 2
                        },
                        new
                        {
                            StudentId = 4,
                            ArtifactId = 9,
                            PurchasedQuantity = 10
                        },
                        new
                        {
                            StudentId = 9,
                            ArtifactId = 9,
                            PurchasedQuantity = 10
                        },
                        new
                        {
                            StudentId = 9,
                            ArtifactId = 3,
                            PurchasedQuantity = 10
                        },
                        new
                        {
                            StudentId = 2,
                            ArtifactId = 1,
                            PurchasedQuantity = 2
                        },
                        new
                        {
                            StudentId = 8,
                            ArtifactId = 6,
                            PurchasedQuantity = 0
                        },
                        new
                        {
                            StudentId = 6,
                            ArtifactId = 8,
                            PurchasedQuantity = 9
                        },
                        new
                        {
                            StudentId = 9,
                            ArtifactId = 10,
                            PurchasedQuantity = 5
                        },
                        new
                        {
                            StudentId = 6,
                            ArtifactId = 9,
                            PurchasedQuantity = 10
                        },
                        new
                        {
                            StudentId = 3,
                            ArtifactId = 3,
                            PurchasedQuantity = 6
                        },
                        new
                        {
                            StudentId = 2,
                            ArtifactId = 2,
                            PurchasedQuantity = 1
                        },
                        new
                        {
                            StudentId = 10,
                            ArtifactId = 10,
                            PurchasedQuantity = 10
                        },
                        new
                        {
                            StudentId = 1,
                            ArtifactId = 6,
                            PurchasedQuantity = 4
                        },
                        new
                        {
                            StudentId = 8,
                            ArtifactId = 5,
                            PurchasedQuantity = 8
                        },
                        new
                        {
                            StudentId = 5,
                            ArtifactId = 1,
                            PurchasedQuantity = 3
                        },
                        new
                        {
                            StudentId = 2,
                            ArtifactId = 10,
                            PurchasedQuantity = 6
                        },
                        new
                        {
                            StudentId = 8,
                            ArtifactId = 4,
                            PurchasedQuantity = 6
                        },
                        new
                        {
                            StudentId = 5,
                            ArtifactId = 8,
                            PurchasedQuantity = 5
                        },
                        new
                        {
                            StudentId = 2,
                            ArtifactId = 9,
                            PurchasedQuantity = 7
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentClassroom", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ClassroomId");

                    b.HasIndex("ClassroomId");

                    b.ToTable("StudentClassroom");

                    b.HasData(
                        new
                        {
                            StudentId = 5,
                            ClassroomId = 3
                        },
                        new
                        {
                            StudentId = 9,
                            ClassroomId = 3
                        },
                        new
                        {
                            StudentId = 3,
                            ClassroomId = 2
                        },
                        new
                        {
                            StudentId = 9,
                            ClassroomId = 2
                        },
                        new
                        {
                            StudentId = 8,
                            ClassroomId = 1
                        },
                        new
                        {
                            StudentId = 10,
                            ClassroomId = 1
                        },
                        new
                        {
                            StudentId = 5,
                            ClassroomId = 2
                        },
                        new
                        {
                            StudentId = 4,
                            ClassroomId = 1
                        },
                        new
                        {
                            StudentId = 4,
                            ClassroomId = 2
                        },
                        new
                        {
                            StudentId = 2,
                            ClassroomId = 1
                        },
                        new
                        {
                            StudentId = 7,
                            ClassroomId = 1
                        },
                        new
                        {
                            StudentId = 7,
                            ClassroomId = 3
                        },
                        new
                        {
                            StudentId = 5,
                            ClassroomId = 1
                        },
                        new
                        {
                            StudentId = 10,
                            ClassroomId = 2
                        },
                        new
                        {
                            StudentId = 3,
                            ClassroomId = 3
                        },
                        new
                        {
                            StudentId = 6,
                            ClassroomId = 2
                        },
                        new
                        {
                            StudentId = 10,
                            ClassroomId = 3
                        },
                        new
                        {
                            StudentId = 7,
                            ClassroomId = 2
                        },
                        new
                        {
                            StudentId = 1,
                            ClassroomId = 1
                        },
                        new
                        {
                            StudentId = 6,
                            ClassroomId = 1
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentQuest", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "QuestId");

                    b.HasIndex("QuestId");

                    b.ToTable("StudentQuest");

                    b.HasData(
                        new
                        {
                            StudentId = 6,
                            QuestId = 7,
                            Status = "Pending"
                        },
                        new
                        {
                            StudentId = 2,
                            QuestId = 5,
                            Status = "Pending"
                        },
                        new
                        {
                            StudentId = 6,
                            QuestId = 9,
                            Status = "Pending"
                        },
                        new
                        {
                            StudentId = 2,
                            QuestId = 2,
                            Status = "Pending"
                        },
                        new
                        {
                            StudentId = 7,
                            QuestId = 3,
                            Status = "Pending"
                        },
                        new
                        {
                            StudentId = 8,
                            QuestId = 5,
                            Status = "Completed"
                        },
                        new
                        {
                            StudentId = 10,
                            QuestId = 2,
                            Status = "Completed"
                        },
                        new
                        {
                            StudentId = 9,
                            QuestId = 8,
                            Status = "Completed"
                        },
                        new
                        {
                            StudentId = 7,
                            QuestId = 4,
                            Status = "Completed"
                        },
                        new
                        {
                            StudentId = 4,
                            QuestId = 6,
                            Status = "Pending"
                        },
                        new
                        {
                            StudentId = 5,
                            QuestId = 6,
                            Status = "Pending"
                        },
                        new
                        {
                            StudentId = 6,
                            QuestId = 5,
                            Status = "Completed"
                        },
                        new
                        {
                            StudentId = 6,
                            QuestId = 1,
                            Status = "Pending"
                        },
                        new
                        {
                            StudentId = 1,
                            QuestId = 4,
                            Status = "Pending"
                        },
                        new
                        {
                            StudentId = 7,
                            QuestId = 9,
                            Status = "Pending"
                        },
                        new
                        {
                            StudentId = 5,
                            QuestId = 9,
                            Status = "Completed"
                        },
                        new
                        {
                            StudentId = 3,
                            QuestId = 5,
                            Status = "Completed"
                        },
                        new
                        {
                            StudentId = 1,
                            QuestId = 6,
                            Status = "Pending"
                        },
                        new
                        {
                            StudentId = 4,
                            QuestId = 1,
                            Status = "Completed"
                        },
                        new
                        {
                            StudentId = 1,
                            QuestId = 10,
                            Status = "Completed"
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Role").HasValue("Admin");
                });

            modelBuilder.Entity("QuestStore.Core.Entities.Mentor", b =>
                {
                    b.HasBaseType("QuestStore.Core.Entities.User");

                    b.HasDiscriminator().HasValue("Mentor");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Description = "Use the solid state ADP matrix, then you can parse the solid state matrix!",
                            Email = "Marcus_Hermiston@yahoo.com",
                            Name = "Marcus",
                            Surname = "Hermiston"
                        },
                        new
                        {
                            Id = 12,
                            Description = "The PCI program is down, transmit the multi-byte program so we can transmit the PCI program!",
                            Email = "Javier.Armstrong@yahoo.com",
                            Name = "Javier",
                            Surname = "Armstrong"
                        },
                        new
                        {
                            Id = 13,
                            Description = "backing up the panel won't do anything, we need to generate the open-source CSS panel!",
                            Email = "Jackie_Cruickshank@gmail.com",
                            Name = "Jackie",
                            Surname = "Cruickshank"
                        },
                        new
                        {
                            Id = 14,
                            Description = "I'll parse the primary USB interface, that should interface the USB interface!",
                            Email = "Oliver.Koss@hotmail.com",
                            Name = "Oliver",
                            Surname = "Koss"
                        },
                        new
                        {
                            Id = 15,
                            Description = "The PNG feed is down, input the back-end feed so we can input the PNG feed!",
                            Email = "Noah_Schroeder@gmail.com",
                            Name = "Noah",
                            Surname = "Schroeder"
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.Student", b =>
                {
                    b.HasBaseType("QuestStore.Core.Entities.User");

                    b.Property<int>("Coins")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Student");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The XML hard drive is down, reboot the digital hard drive so we can reboot the XML hard drive!",
                            Email = "Jeffrey_Kassulke@yahoo.com",
                            Name = "Jeffrey",
                            Surname = "Kassulke",
                            Coins = 814
                        },
                        new
                        {
                            Id = 2,
                            Description = "The XSS monitor is down, override the 1080p monitor so we can override the XSS monitor!",
                            Email = "Bridget.Hane80@yahoo.com",
                            Name = "Bridget",
                            Surname = "Hane",
                            Coins = 7
                        },
                        new
                        {
                            Id = 3,
                            Description = "Use the mobile JBOD protocol, then you can transmit the mobile protocol!",
                            Email = "Alan_Thompson@yahoo.com",
                            Name = "Alan",
                            Surname = "Thompson",
                            Coins = 510
                        },
                        new
                        {
                            Id = 4,
                            Description = "Use the neural FTP feed, then you can calculate the neural feed!",
                            Email = "Sylvia15@hotmail.com",
                            Name = "Sylvia",
                            Surname = "Ward",
                            Coins = 18
                        },
                        new
                        {
                            Id = 5,
                            Description = "Use the 1080p USB alarm, then you can copy the 1080p alarm!",
                            Email = "Pauline83@gmail.com",
                            Name = "Pauline",
                            Surname = "Sanford",
                            Coins = 383
                        },
                        new
                        {
                            Id = 6,
                            Description = "The SSL bus is down, index the 1080p bus so we can index the SSL bus!",
                            Email = "William_Harvey70@gmail.com",
                            Name = "William",
                            Surname = "Harvey",
                            Coins = 215
                        },
                        new
                        {
                            Id = 7,
                            Description = "We need to override the optical SMTP card!",
                            Email = "Virginia.Connelly34@hotmail.com",
                            Name = "Virginia",
                            Surname = "Connelly",
                            Coins = 161
                        },
                        new
                        {
                            Id = 8,
                            Description = "If we reboot the system, we can get to the SQL system through the mobile SQL system!",
                            Email = "Corey.OConner86@yahoo.com",
                            Name = "Corey",
                            Surname = "O'Conner",
                            Coins = 741
                        },
                        new
                        {
                            Id = 9,
                            Description = "You can't quantify the port without copying the cross-platform GB port!",
                            Email = "Homer_Nikolaus@gmail.com",
                            Name = "Homer",
                            Surname = "Nikolaus",
                            Coins = 727
                        },
                        new
                        {
                            Id = 10,
                            Description = "quantifying the driver won't do anything, we need to synthesize the neural PNG driver!",
                            Email = "Amy.Osinski27@gmail.com",
                            Name = "Amy",
                            Surname = "Osinski",
                            Coins = 705
                        });
                });

            modelBuilder.Entity("QuestStore.Core.Entities.MentorClassroom", b =>
                {
                    b.HasOne("QuestStore.Core.Entities.Classroom", "Classroom")
                        .WithMany("MentorClassrooms")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestStore.Core.Entities.Mentor", "Mentor")
                        .WithMany("MentorClassrooms")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentArtifact", b =>
                {
                    b.HasOne("QuestStore.Core.Entities.Artifact", "Artifact")
                        .WithMany()
                        .HasForeignKey("ArtifactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestStore.Core.Entities.Student", "Student")
                        .WithMany("StudentArtifacts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentClassroom", b =>
                {
                    b.HasOne("QuestStore.Core.Entities.Classroom", "Classroom")
                        .WithMany("StudentClassrooms")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestStore.Core.Entities.Student", "Student")
                        .WithMany("StudentClassrooms")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestStore.Core.Entities.StudentQuest", b =>
                {
                    b.HasOne("QuestStore.Core.Entities.Quest", "Quest")
                        .WithMany()
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestStore.Core.Entities.Student", "Student")
                        .WithMany("StudentQuests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
